+-------------------+
| Tables_in_tiro_db |
+-------------------+
| ammo              | -> municiones para weapons
| codigos           | -> codigos de eventos para eventlog
| eventlog          | -> log de actividad general, login de usuarios, acciones sobre eventos y mapas, etc
| eventos           | -> evento de juego
| events_maps       | -> tabla auxiliar que vincula los mapas (m_id) con eventos (valor)
| mapas             | -> identificador de mapas para eventos, luego se asocian objetos (o_mapid) 
| objetos           | -> objetos pertenecientes a un determinado mapa
| ses               | -> sesiones de usuarios
| tipos             | -> tipos de objetos (cuadrado, redondel, linea, flecha, etc)
| users             | -> usuarios del sistema y jugadores, tienen fecha de vencimiento
| weapon_ammo       | -> tabla que relaciona ammo, con weapon_types
| weapon_types      | -> tipos de morteros/caÃ±ones/lanzaderas
+-------------------+

bkp y restore de la base de datos desde un host corriendo contenedores

BACKUP:
- entrar al contenedor con la DB y hacer eel BACKUP
# docker exec -it tiro-db-1 /bin/bash
# mariadb-dump -u admin_tiro -p tiro_db > /archivo.sql

salir al S.O. y copiar el archivo desde el contenedor a la carpeta donde debe guardarse (repo git por ej.)
# docker cp tiro-db-1:/archivo.sql archivo.sql


RESTORE:

si el sql viene de un github ya queda en posicion, saltar al punto 3
1) docker cp archivo.sql nombre_del_contenedor_mariadb:/ruta/en/el/contenedor/archivo.sql

2) docker exec -it nombre_del_contenedor_mariadb /bin/bash

3) mysql -u admin_tiro -p -h 172.18.0.2 tiro_db < tiro_db-bkp.sql

(poner la IP del contenedor donde corre la mariaDB, en este ejemplo es 172.18.0.2)

TO DO LIST:

- agregar housekeeping task que borre disparos viejos y usuarios con fecha de eliminacion
- modificar checkperms.py para verificar usuarios habilitados o no, y vencidos de fecha
- permitir login de jugadores habilitados para disparar









POST /medicion HTTP/1.1
Content-Type: application/json
User-Agent: PostmanRuntime/7.34.0
Accept: */*
Postman-Token: a268507c-db70-45b0-9162-25ee219ab650
Host: 127.0.0.1:17001
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Length: 32

{
    "val1": 5,
    "val2": 1
}

HTTP/1.1 200 OK
Server: Werkzeug/3.0.1 Python/3.11.6
Date: Tue, 14 Nov 2023 12:08:43 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 4
Connection: close

FIN

curl -X POST http://127.0.0.1:17001/medicion -H 'Content-Type: application/json' -d '{ "val1": 5, "val2": 1}'


#include <stdio.h>
#include <curl/curl.h>
int main(void) {
    CURL *curl;
    CURLcode res;
    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();
    if(curl) {
        curl_easy_setopt(curl, CURLOPT_URL, "http://127.0.0.1:17001/medicion");
        curl_easy_setopt(curl, CURLOPT_POST, 1L);
        struct curl_slist *headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        const char *data = "{\"val1\": 5, \"val2\": 1}";
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);
        res = curl_easy_perform(curl);
        if(res != CURLE_OK) fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        curl_easy_cleanup(curl);
        curl_slist_free_all(headers);
    }
    curl_global_cleanup();
    return 0;
}
